mixModel <- MixModel(mixData,K,p,q)
n_tries=1
max_iter=1000
threshold <- 1e-5
verbose <- TRUE
verbose_IRLS <- TRUE
mixOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$homoskedastic)
phi <- Phi$new()
phi$setPhi1(mixModel$x,mixModel$p,mixModel$q)
top <- 0
try_EM <- 0
best_loglik <- -Inf
cpu_time_all <- c()
try_EM <- try_EM+1
message("EM try nr ",try_EM)
time <- Sys.time()
# Initializations
mixParam <- MixParam(mixModel, modelOptions)
modelOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$homoskedastic)
mixParam <- MixParam(mixModel, modelOptions)
mixParam$initParam(mixModel, phi, modelOptions, try_EM)
iter <- 0
converge <- FALSE
prev_loglik <- -Inf
mixStats <- MixStats(mixModel, modelOptions)
mixStats$EStep(mixModel, mixParam, phi, modelOptions$variance_type)
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/test_functions.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
rm(list = ls())
source("R/dataset.R")
source("R/MixModel.R")
source("R/ModelOptions.R")
source("R/enums.R")
source("R/ModelLearner.R")
library(R.matlab)
fileName = "data/simulated_time_series.mat"
mixData <- MyData$new()
mixData$setDataFromMat(fileName)
K <- 5; # nomber of regimes (mixture components)
p <- 3; # dimension of beta' (order of the polynomial regressors)
q <- 1; # dimension of w (ordre of the logistic regression: to be set to 1 for segmentation)
mixModel <- MixModel(mixData,K,p,q)
n_tries=1
max_iter=1000
threshold <- 1e-5
verbose <- TRUE
verbose_IRLS <- TRUE
modelOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$homoskedastic)
phi <- Phi$new()
phi$setPhi1(mixModel$x,mixModel$p,mixModel$q)
top <- 0
try_EM <- 0
best_loglik <- -Inf
cpu_time_all <- c()
try_EM <- try_EM+1
message("EM try nr ",try_EM)
time <- Sys.time()
# Initializations
mixParam <- MixParam(mixModel, modelOptions)
mixParam$initParam(mixModel, phi, modelOptions, try_EM)
iter <- 0
converge <- FALSE
prev_loglik <- -Inf
mixStats <- MixStats(mixModel, modelOptions)
mixStats$EStep(mixModel, mixParam, phi, modelOptions$variance_type)
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
rm(list = ls())
source("R/dataset.R")
source("R/MixModel.R")
source("R/ModelOptions.R")
source("R/enums.R")
source("R/ModelLearner.R")
library(R.matlab)
fileName = "data/simulated_time_series.mat"
mixData <- MyData$new()
mixData$setDataFromMat(fileName)
K <- 5; # nomber of regimes (mixture components)
p <- 3; # dimension of beta' (order of the polynomial regressors)
q <- 1; # dimension of w (ordre of the logistic regression: to be set to 1 for segmentation)
mixModel <- MixModel(mixData,K,p,q)
n_tries=1
max_iter=1000
threshold <- 1e-5
verbose <- TRUE
verbose_IRLS <- TRUE
modelOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$homoskedastic)
####
# EM Algorithm
####
phi <- Phi$new()
phi$setPhi1(mixModel$x,mixModel$p,mixModel$q)
top <- 0
try_EM <- 0
best_loglik <- -Inf
cpu_time_all <- c()
try_EM <- try_EM+1
message("EM try nr ",try_EM)
time <- Sys.time()
# Initializations
mixParam <- MixParam(mixModel, modelOptions)
mixParam$initParam(mixModel, phi, modelOptions, try_EM)
iter <- 0
converge <- FALSE
prev_loglik <- -Inf
mixStats <- MixStats(mixModel, modelOptions)
mixStats$EStep(mixModel, mixParam, phi, modelOptions$variance_type)
mixParam$MStep(mixModel, mixStats, phi, modelOptions)
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
rm(list = ls())
source("R/dataset.R")
source("R/MixModel.R")
source("R/ModelOptions.R")
source("R/enums.R")
source("R/ModelLearner.R")
library(R.matlab)
fileName = "data/simulated_time_series.mat"
mixData <- MyData$new()
mixData$setDataFromMat(fileName)
K <- 1; # nomber of regimes (mixture components)
p <- 3; # dimension of beta' (order of the polynomial regressors)
q <- 1; # dimension of w (ordre of the logistic regression: to be set to 1 for segmentation)
mixModel <- MixModel(mixData,K,p,q)
n_tries=1
max_iter=1000
threshold <- 1e-5
verbose <- TRUE
verbose_IRLS <- FALSE
modelOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$homoskedastic)
phi <- Phi$new()
phi$setPhi1(mixModel$x,mixModel$p,mixModel$q)
top <- 0
try_EM <- 0
best_loglik <- -Inf
cpu_time_all <- c()
try_EM <- try_EM+1
message("EM try nr ",try_EM)
time <- Sys.time()
# Initializations
mixParam <- MixParam(mixModel, modelOptions)
mixParam$initParam(mixModel, phi, modelOptions, try_EM)
iter <- 0
converge <- FALSE
prev_loglik <- -Inf
mixStats <- MixStats(mixModel, modelOptions)
mixStats$EStep(mixModel, mixParam, phi, modelOptions$variance_type)
reg_irls <- mixParam$MStep(mixModel, mixStats, phi, modelOptions)
mixStats$computeLikelihood(reg_irls)
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/MixStats.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
for (k in 2:1){print(k)}
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
?lm
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
library(matlib)
install.packages("matlib")
library(matlib)
inv(diag(3))
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
for k in 2:1{print(k)}
for (k in 2:1) {print(k)}
k<-2
K<-2
for (k in 1:K+1) {print(k)}
for (j in 1:K+1) {print(k)}
for (j in 1:K+1) {print(j)}
for (j in 1:(K+1)) {print(j)}
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/MixParam.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
source('~/Documents/git/RHLP_R/RHLP/R/script_EM.R')
<<<<<<< Updated upstream
=======
source('~/data/data-Research/my-codes/My-Open-Access-Codes/RHLP_R/RHLP/R/script_EM.R')
source('~/data/data-Research/my-codes/My-Open-Access-Codes/RHLP_R/RHLP/R/script_EM.R')
>>>>>>> Stashed changes
=======
source('~/Documents/git/RHLP_R/RHLP/R/main_FRHLP_EM.R')
>>>>>>> Stashed changes
rm(list = ls())
source("R/dataset.R")
source("R/MixModel.R")
source("R/ModelOptions.R")
source("R/enums.R")
source("R/ModelLearner.R")
fileName = "data/simulated_time_series.mat"
mixData <- MyData$new()
mixData$setDataFromMat(fileName)
K <- 5; # nomber of regimes (mixture components)
p <- 3; # dimension of beta' (order of the polynomial regressors)
q <- 1; # dimension of w (ordre of the logistic regression: to be set to 1 for segmentation)
mixModel <- MixModel(mixData,K,p,q)
n_tries=1
max_iter=1500
threshold <- 1e-6
verbose <- TRUE
verbose_IRLS <- FALSE
modelOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$hetereskedastic)
####
# EM Algorithm
####
solution <- EM(mixModel, modelOptions)
solution
View(solution)
View(solution)
par(mfrow=c(2, 1))
plot(fData$Y, type = "l", ylab = "y", xlab = "")
plot(mixData$y, type = "l", ylab = "y", xlab = "")
title(main = "Time series, RHLP regimes and process probabilities")
colors = rainbow(K)
colors = rainbow(K)
for (k in 1:K) {
index <- (solution[[2]]$klas == k)
polynomials <- solution[[2]]$polynomials[(solution[[2]]$klas == k), k]
lines(solution[[2]]$polynomials[, k], lty = "dotted", lwd = 2, col = colors[k])
lines(seq(1:mixData$m)[index], polynomials, lwd = 2, col = colors[k])
}
plot(solution[[2]]$h_ig[, 1], type = "l", lwd = 2, col = colors[1], xlab = "x", ylab = expression('Probability ' ~ pi [k] (t, w)))
lines(solution[[2]]$h_ig[, k], type = "l", lwd = 2, col = colors[k])
for (k in 2:K) {
lines(solution[[2]]$h_ig[, k], type = "l", lwd = 2, col = colors[k])
}
plot(mixData$y, type = "l", ylab = "y", xlab = "")
title(main = "Time series, estimated RHLP model, and segmentation")
tk = which(diff(solution[[2]]$klas) != 0)
for (i in 1:length(tk)) {
abline(v = tk[i], lty = "dotted", lwd = 2, col = "red")
}
plot(solution[[2]]$klas, type = "l", lwd = 2, col = "red", xlab = "", ylab = "Estimated class labels")
par(mfrow=c(2, 1))
plot(mixData$y, type = "l", ylab = "y", xlab = "")
title(main = "Time series, estimated RHLP model, and segmentation")
tk = which(diff(solution[[2]]$klas) != 0)
for (i in 1:length(tk)) {
abline(v = tk[i], lty = "dotted", lwd = 2, col = "red")
}
for (k in 1:K) {
index <- (solution[[2]]$klas == k)
polynomials <- solution[[2]]$polynomials[(solution[[2]]$klas == k), k]
lines(seq(1:mixData$m)[index], polynomials, lwd = 2, col = colors[k])
}
plot(solution[[2]]$klas, type = "l", lwd = 2, col = "red", xlab = "", ylab = "Estimated class labels")
par(mfrow=c(2, 1))
plot(mixData$y, type = "l", ylab = "y", xlab = "")
title(main = "Time series, estimated RHLP model, and segmentation")
tk = which(diff(solution[[2]]$klas) != 0)
for (i in 1:length(tk)) {
abline(v = tk[i], lty = "dotted", lwd = 2, col = "black")
}
for (k in 1:K) {
index <- (solution[[2]]$klas == k)
polynomials <- solution[[2]]$polynomials[(solution[[2]]$klas == k), k]
lines(seq(1:mixData$m)[index], polynomials, lwd = 2, col = "red")
}
plot(solution[[2]]$klas, type = "l", lwd = 2, col = "black", xlab = "", ylab = "Estimated class labels")
plot(mixData$y, type = "l", ylab = "y", xlab = "", col = "grey")
par(mfrow=c(2, 1))
plot(mixData$y, type = "l", ylab = "y", xlab = "", col = "grey")
title(main = "Time series, estimated RHLP model, and segmentation")
tk = which(diff(solution[[2]]$klas) != 0)
for (i in 1:length(tk)) {
abline(v = tk[i], lty = "dotted", lwd = 2, col = "black")
}
for (k in 1:K) {
index <- (solution[[2]]$klas == k)
polynomials <- solution[[2]]$polynomials[(solution[[2]]$klas == k), k]
lines(seq(1:mixData$m)[index], polynomials, lwd = 2, col = "red")
}
plot(solution[[2]]$klas, type = "l", lwd = 2, col = "black", xlab = "", ylab = "Estimated class labels")
rm(list = ls())
source("R/dataset.R")
source("R/MixModel.R")
source("R/ModelOptions.R")
source("R/enums.R")
source("R/ModelLearner.R")
fileName = "data/simulated_time_series.mat"
mixData <- MyData$new()
mixData$setDataFromMat(fileName)
K <- 5; # nomber of regimes (mixture components)
p <- 3; # dimension of beta' (order of the polynomial regressors)
q <- 1; # dimension of w (ordre of the logistic regression: to be set to 1 for segmentation)
mixModel <- MixModel(mixData,K,p,q)
n_tries=1
max_iter=1500
threshold <- 1e-6
verbose <- TRUE
verbose_IRLS <- FALSE
modelOptions <- ModelOptions(n_tries, max_iter, threshold, verbose, verbose_IRLS, variance_types$hetereskedastic)
####
# EM Algorithm
####
solution <- EM(mixModel, modelOptions)
#mixParamSolution <- solution[[1]]
#mixStatsSolution <- solution[[2]]
par(mfrow=c(2, 1))
plot(mixData$y, type = "l", ylab = "y", xlab = "")
title(main = "Time series, RHLP regimes and process probabilities")
colors = rainbow(K)
for (k in 1:K) {
index <- (solution[[2]]$klas == k)
polynomials <- solution[[2]]$polynomials[(solution[[2]]$klas == k), k]
lines(solution[[2]]$polynomials[, k], lty = "dotted", lwd = 2, col = colors[k])
lines(seq(1:mixData$m)[index], polynomials, lwd = 2, col = colors[k])
}
plot(solution[[2]]$h_ig[, 1], type = "l", lwd = 2, col = colors[1], xlab = "x", ylab = expression('Probability ' ~ pi [k] (t, w)))
for (k in 2:K) {
lines(solution[[2]]$h_ig[, k], type = "l", lwd = 2, col = colors[k])
}
# plot
par(mfrow=c(2, 1))
plot(mixData$y, type = "l", ylab = "y", xlab = "", col = "grey")
title(main = "Time series, estimated RHLP model, and segmentation")
tk = which(diff(solution[[2]]$klas) != 0)
for (i in 1:length(tk)) {
abline(v = tk[i], lty = "dotted", lwd = 2, col = "black")
}
for (k in 1:K) {
index <- (solution[[2]]$klas == k)
polynomials <- solution[[2]]$polynomials[(solution[[2]]$klas == k), k]
lines(seq(1:mixData$m)[index], polynomials, lwd = 2, col = "red")
}
plot(solution[[2]]$klas, type = "l", lwd = 2, col = "black", xlab = "", ylab = "Estimated class labels")
